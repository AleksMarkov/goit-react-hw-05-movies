{"version":3,"file":"static/js/719.3ccdc500.chunk.js","mappings":"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","sources":["api/movies.js","webpack://react-homework-template/./src/components/SingleMovie/single-movie.module.css?1830","components/SingleMovie/SingleMovie.jsx","pages/SingleMoviePage/SingleMoviePage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst URL_TREND = 'https://api.themoviedb.org/3/trending/movie/day';\nconst URL_DETAILS = 'https://api.themoviedb.org/3/movie/';\nconst URL_SEARCH = 'https://api.themoviedb.org/3/search/movie';\nconst API_KEY = 'fc71d2bf79fa505d782ee19e1005b2a0';\n\nexport const getTrendingMovies = () => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n    language: 'en-US',\n    page: '1',\n    include_adult: false,\n    per_page: '20',\n  });\n  return axios.get(`${URL_TREND}?${params}`);\n};\n\nexport const getMovieById = id => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n  });\n\n  return axios.get(`${URL_DETAILS}/${id}?${params}`);\n};\n\nexport const getMovieCastById = id => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n  });\n\n  return axios.get(`${URL_DETAILS}/${id}/credits?${params}`);\n};\n\nexport const getMovieReviewById = id => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n  });\n\n  return axios.get(`${URL_DETAILS}/${id}/reviews?${params}`);\n};\n\nexport const searchMovies = query => {\n  const params = new URLSearchParams({\n    api_key: API_KEY,\n    language: 'en-US',\n    include_adult: false,\n    query: query,\n    page: '1',\n  });\n\n  return axios.get(`${URL_SEARCH}?${params}`);\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"button\":\"single-movie_button__295iC\",\"mainInfo\":\"single-movie_mainInfo__AvS4s\",\"imgBlock\":\"single-movie_imgBlock__qpuOJ\",\"img\":\"single-movie_img__ijcdv\",\"textBlock\":\"single-movie_textBlock__0DAke\",\"mainTitle\":\"single-movie_mainTitle__IgZSz\",\"secondTitle\":\"single-movie_secondTitle__xZs9c\"};","import { useState, useEffect, Suspense } from 'react';\nimport {\n  useParams,\n  useNavigate,\n  useLocation,\n  NavLink,\n  Outlet,\n} from 'react-router-dom';\nimport { getMovieById } from 'api/movies';\n\nimport style from './single-movie.module.css';\n\nconst SingleMovie = () => {\n  const [movie, setMovie] = useState();\n  const [year, setYear] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { id } = useParams();\n  const location = useLocation();\n\n  const from = location.state?.from || '/';\n\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!id) return;\n    const fetchMovie = async () => {\n      try {\n        setLoading(true);\n        const { data } = await getMovieById(id);\n        setMovie(data);\n        const dateObject = new Date(Date.parse(data.release_date));\n        setYear(dateObject.getFullYear());\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovie();\n  }, [id]);\n\n  const goBack = () => navigate(from);\n\n  return (\n    <div>\n      {loading && <p>...Loading</p>}\n      {error && <p>Error: {error}</p>}\n      <button className={style.button} onClick={goBack} type=\"button\">\n        {'\\u2190'} Go back\n      </button>\n      {movie && (\n        <>\n          <div className={style.mainInfo}>\n            <div className={style.imgBlock}>\n              <img\n                src={`https://image.tmdb.org/t/p/original/${movie.poster_path}`}\n                alt={movie.title}\n                className={style.img}\n              />\n            </div>\n            <div className={style.textBlock}>\n              <div>\n                <p className={style.mainTitle}>\n                  {movie.title} ({year})\n                </p>\n                <p>\n                  <span>User Score:</span>{' '}\n                  {(movie.vote_average * 10).toFixed(2)}%\n                </p>\n              </div>\n              <div>\n                <p className={style.secondTitle}>Overview</p>\n                <p>{movie.overview}</p>\n              </div>\n              <div>\n                <p className={style.secondTitle}>Genres</p>\n                <>\n                  {movie.poster_path && (\n                    <p>\n                      <span></span>{' '}\n                      {movie.genres.map((genre, index) => (\n                        <span key={genre.id}>\n                          {genre.name}\n                          {index !== movie.genres.length - 1 && ' '}\n                        </span>\n                      ))}\n                    </p>\n                  )}\n                </>\n              </div>\n            </div>\n          </div>\n          <p>Additional information</p>\n          <ul>\n            <li>\n              <NavLink to=\"cast\" state={{ from }}>\n                Cast\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"reviews\" state={{ from }}>\n                Reviews\n              </NavLink>\n            </li>\n            <Suspense> {<Outlet />}</Suspense>\n          </ul>\n        </>\n      )}\n    </div>\n  );\n};\nexport default SingleMovie;\n","// import { Suspense } from 'react';\n// import { NavLink, Outlet } from 'react-router-dom';\nimport SingleMovie from 'components/SingleMovie/SingleMovie';\n\nconst SingleMoviePage = () => {\n  return (\n    <div>\n      <SingleMovie />\n      {/* <p>Additional information</p>\n      <ul>\n        <li>\n          <NavLink to=\"cast\">Cast</NavLink>\n        </li>\n        <li>\n          <NavLink to=\"reviews\">Reviews</NavLink>\n        </li>\n        <Suspense> {<Outlet />}</Suspense>\n      </ul> */}\n    </div>\n  );\n};\n\nexport default SingleMoviePage;\n"],"names":["URL_DETAILS","API_KEY","getTrendingMovies","params","URLSearchParams","api_key","language","page","include_adult","per_page","axios","concat","getMovieById","id","getMovieCastById","getMovieReviewById","searchMovies","query","_location$state","_useState","useState","_useState2","_slicedToArray","movie","setMovie","_useState3","_useState4","year","setYear","_useState5","_useState6","loading","setLoading","_useState7","_useState8","error","setError","useParams","from","useLocation","state","navigate","useNavigate","useEffect","fetchMovie","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","_yield$getMovieById","data","dateObject","_context","prev","next","sent","Date","parse","release_date","getFullYear","t0","message","finish","stop","apply","arguments","_jsxs","children","_jsx","className","style","onClick","type","_Fragment","src","poster_path","alt","title","vote_average","toFixed","overview","genres","map","genre","index","name","length","NavLink","to","Suspense","Outlet","SingleMovie"],"sourceRoot":""}